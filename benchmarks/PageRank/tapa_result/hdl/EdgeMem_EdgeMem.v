// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="EdgeMem_EdgeMem,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.786000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1544,HLS_SYN_LUT=126,HLS_VERSION=2019_2}" *)

module EdgeMem_EdgeMem (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        edge_req_q_fifo_V_dout,
        edge_req_q_fifo_V_empty_n,
        edge_req_q_fifo_V_read,
        edge_req_q_peek_val,
        edge_resp_q_fifo_V_din,
        edge_resp_q_fifo_V_full_n,
        edge_resp_q_fifo_V_write,
        edges_read_addr_V_din,
        edges_read_addr_V_full_n,
        edges_read_addr_V_write,
        edges_read_data_V_data_V_dout,
        edges_read_data_V_data_V_empty_n,
        edges_read_data_V_data_V_read,
        edges_read_peek_data_V,
        edges_write_addr_V,
        edges_write_data_V_data_V
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [32:0] edge_req_q_fifo_V_dout;
input   edge_req_q_fifo_V_empty_n;
output   edge_req_q_fifo_V_read;
input  [32:0] edge_req_q_peek_val;
output  [512:0] edge_resp_q_fifo_V_din;
input   edge_resp_q_fifo_V_full_n;
output   edge_resp_q_fifo_V_write;
output  [63:0] edges_read_addr_V_din;
input   edges_read_addr_V_full_n;
output   edges_read_addr_V_write;
input  [511:0] edges_read_data_V_data_V_dout;
input   edges_read_data_V_data_V_empty_n;
output   edges_read_data_V_data_V_read;
input  [511:0] edges_read_peek_data_V;
input  [63:0] edges_write_addr_V;
input  [511:0] edges_write_data_V_data_V;

reg ap_idle;
reg edge_req_q_fifo_V_read;
reg edge_resp_q_fifo_V_write;
reg edges_read_addr_V_write;
reg edges_read_data_V_data_V_read;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] valid_0_reg_120;
reg   [511:0] edge_v_01_reg_132;
wire   [0:0] empty_n_fu_186_p1;
reg   [0:0] empty_n_reg_225;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] ap_phi_mux_valid_0_phi_fu_124_p4;
wire   [0:0] tmp_1_nbreadreq_fu_86_p3;
wire   [0:0] full_n_1_nbwrite_fu_100_p3;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg   [0:0] ap_phi_mux_valid_3_phi_fu_179_p4;
wire    ap_block_pp0_stage0;
reg   [511:0] ap_phi_mux_edge_v_2_phi_fu_167_p4;
reg   [511:0] ap_phi_mux_tmp_val_data_V_phi_fu_146_p4;
reg   [511:0] ap_phi_reg_pp0_iter1_tmp_val_data_V_reg_143;
wire   [511:0] ap_phi_reg_pp0_iter0_tmp_val_data_V_reg_143;
reg   [0:0] ap_phi_mux_valid_1_phi_fu_156_p4;
reg   [0:0] ap_phi_reg_pp0_iter1_valid_1_reg_153;
wire   [0:0] ap_phi_reg_pp0_iter0_valid_1_reg_153;
reg   [511:0] ap_phi_reg_pp0_iter1_edge_v_2_reg_163;
wire   [511:0] ap_phi_reg_pp0_iter0_edge_v_2_reg_163;
wire   [0:0] and_ln140_fu_218_p2;
reg   [0:0] ap_phi_reg_pp0_iter1_valid_3_reg_175;
wire   [0:0] ap_phi_reg_pp0_iter0_valid_3_reg_175;
wire   [0:0] edges_read_nbread_fu_80_p2_0;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] trunc_ln60_fu_194_p1;
wire   [0:0] xor_ln140_fu_212_p0;
wire   [0:0] xor_ln140_fu_212_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_107;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_107)) begin
        if (((ap_phi_mux_valid_0_phi_fu_124_p4 == 1'd0) & (empty_n_fu_186_p1 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_edge_v_2_reg_163 <= edges_read_data_V_data_V_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_edge_v_2_reg_163 <= ap_phi_reg_pp0_iter0_edge_v_2_reg_163;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_107)) begin
        if (((ap_phi_mux_valid_0_phi_fu_124_p4 == 1'd0) & (empty_n_fu_186_p1 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_tmp_val_data_V_reg_143 <= edges_read_data_V_data_V_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_tmp_val_data_V_reg_143 <= ap_phi_reg_pp0_iter0_tmp_val_data_V_reg_143;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_107)) begin
        if (((ap_phi_mux_valid_0_phi_fu_124_p4 == 1'd0) & (empty_n_fu_186_p1 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_valid_1_reg_153 <= edges_read_nbread_fu_80_p2_0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_valid_1_reg_153 <= ap_phi_reg_pp0_iter0_valid_1_reg_153;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_107)) begin
        if (((ap_phi_mux_valid_0_phi_fu_124_p4 == 1'd0) & (empty_n_fu_186_p1 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_valid_3_reg_175 <= edges_read_nbread_fu_80_p2_0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_valid_3_reg_175 <= ap_phi_reg_pp0_iter0_valid_3_reg_175;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        valid_0_reg_120 <= ap_phi_mux_valid_3_phi_fu_179_p4;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        valid_0_reg_120 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        edge_v_01_reg_132 <= ap_phi_mux_edge_v_2_phi_fu_167_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_valid_0_phi_fu_124_p4 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_n_reg_225 <= edges_read_nbread_fu_80_p2_0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((empty_n_reg_225 == 1'd1) | (valid_0_reg_120 == 1'd1))) begin
        ap_phi_mux_edge_v_2_phi_fu_167_p4 = ap_phi_mux_tmp_val_data_V_phi_fu_146_p4;
    end else begin
        ap_phi_mux_edge_v_2_phi_fu_167_p4 = ap_phi_reg_pp0_iter1_edge_v_2_reg_163;
    end
end

always @ (*) begin
    if ((valid_0_reg_120 == 1'd1)) begin
        ap_phi_mux_tmp_val_data_V_phi_fu_146_p4 = edge_v_01_reg_132;
    end else begin
        ap_phi_mux_tmp_val_data_V_phi_fu_146_p4 = ap_phi_reg_pp0_iter1_tmp_val_data_V_reg_143;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_valid_0_phi_fu_124_p4 = ap_phi_mux_valid_3_phi_fu_179_p4;
    end else begin
        ap_phi_mux_valid_0_phi_fu_124_p4 = valid_0_reg_120;
    end
end

always @ (*) begin
    if ((valid_0_reg_120 == 1'd1)) begin
        ap_phi_mux_valid_1_phi_fu_156_p4 = valid_0_reg_120;
    end else begin
        ap_phi_mux_valid_1_phi_fu_156_p4 = ap_phi_reg_pp0_iter1_valid_1_reg_153;
    end
end

always @ (*) begin
    if (((empty_n_reg_225 == 1'd1) | (valid_0_reg_120 == 1'd1))) begin
        ap_phi_mux_valid_3_phi_fu_179_p4 = and_ln140_fu_218_p2;
    end else begin
        ap_phi_mux_valid_3_phi_fu_179_p4 = ap_phi_reg_pp0_iter1_valid_3_reg_175;
    end
end

always @ (*) begin
    if (((full_n_1_nbwrite_fu_100_p3 == 1'd1) & (tmp_1_nbreadreq_fu_86_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (edge_req_q_fifo_V_empty_n == 1'b1))) begin
        edge_req_q_fifo_V_read = 1'b1;
    end else begin
        edge_req_q_fifo_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (edge_resp_q_fifo_V_full_n == 1'b1) & ((empty_n_reg_225 == 1'd1) | (valid_0_reg_120 == 1'd1)))) begin
        edge_resp_q_fifo_V_write = 1'b1;
    end else begin
        edge_resp_q_fifo_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_nbreadreq_fu_86_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (edges_read_addr_V_full_n == 1'b1))) begin
        edges_read_addr_V_write = 1'b1;
    end else begin
        edges_read_addr_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_phi_mux_valid_0_phi_fu_124_p4 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (edges_read_data_V_data_V_empty_n == 1'b1))) begin
        edges_read_data_V_data_V_read = 1'b1;
    end else begin
        edges_read_data_V_data_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln140_fu_218_p2 = (xor_ln140_fu_212_p2 & ap_phi_mux_valid_1_phi_fu_156_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_107 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_done = 1'b0;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_edge_v_2_reg_163 = 'bx;

assign ap_phi_reg_pp0_iter0_tmp_val_data_V_reg_143 = 'bx;

assign ap_phi_reg_pp0_iter0_valid_1_reg_153 = 'bx;

assign ap_phi_reg_pp0_iter0_valid_3_reg_175 = 'bx;

assign ap_ready = 1'b0;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign edge_resp_q_fifo_V_din = {{1'd0}, {ap_phi_mux_tmp_val_data_V_phi_fu_146_p4}};

assign edges_read_addr_V_din = trunc_ln60_fu_194_p1;

assign edges_read_nbread_fu_80_p2_0 = edges_read_data_V_data_V_empty_n;

assign empty_n_fu_186_p1 = edges_read_nbread_fu_80_p2_0;

assign full_n_1_nbwrite_fu_100_p3 = edges_read_addr_V_full_n;

assign tmp_1_nbreadreq_fu_86_p3 = edge_req_q_fifo_V_empty_n;

assign trunc_ln60_fu_194_p1 = edge_req_q_peek_val[31:0];

assign xor_ln140_fu_212_p0 = edge_resp_q_fifo_V_full_n;

assign xor_ln140_fu_212_p2 = (xor_ln140_fu_212_p0 ^ 1'd1);

endmodule //EdgeMem_EdgeMem
