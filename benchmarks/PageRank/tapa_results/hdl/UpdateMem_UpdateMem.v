// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="UpdateMem_UpdateMem,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.786000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2059,HLS_SYN_LUT=145,HLS_VERSION=2019_2}" *)

module UpdateMem_UpdateMem (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        read_addr_q_fifo_V_dout,
        read_addr_q_fifo_V_empty_n,
        read_addr_q_fifo_V_read,
        read_addr_q_peek_val,
        read_data_q_fifo_V_din,
        read_data_q_fifo_V_full_n,
        read_data_q_fifo_V_write,
        write_addr_q_fifo_V_dout,
        write_addr_q_fifo_V_empty_n,
        write_addr_q_fifo_V_read,
        write_addr_q_peek_val,
        write_data_q_fifo_V_dout,
        write_data_q_fifo_V_empty_n,
        write_data_q_fifo_V_read,
        write_data_q_peek_val,
        updates_read_addr_V_din,
        updates_read_addr_V_full_n,
        updates_read_addr_V_write,
        updates_read_data_V_data_V_dout,
        updates_read_data_V_data_V_empty_n,
        updates_read_data_V_data_V_read,
        updates_read_peek_data_V,
        updates_write_addr_V_din,
        updates_write_addr_V_full_n,
        updates_write_addr_V_write,
        updates_write_data_V_data_V_din,
        updates_write_data_V_data_V_full_n,
        updates_write_data_V_data_V_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [64:0] read_addr_q_fifo_V_dout;
input   read_addr_q_fifo_V_empty_n;
output   read_addr_q_fifo_V_read;
input  [64:0] read_addr_q_peek_val;
output  [512:0] read_data_q_fifo_V_din;
input   read_data_q_fifo_V_full_n;
output   read_data_q_fifo_V_write;
input  [64:0] write_addr_q_fifo_V_dout;
input   write_addr_q_fifo_V_empty_n;
output   write_addr_q_fifo_V_read;
input  [64:0] write_addr_q_peek_val;
input  [512:0] write_data_q_fifo_V_dout;
input   write_data_q_fifo_V_empty_n;
output   write_data_q_fifo_V_read;
input  [512:0] write_data_q_peek_val;
output  [63:0] updates_read_addr_V_din;
input   updates_read_addr_V_full_n;
output   updates_read_addr_V_write;
input  [511:0] updates_read_data_V_data_V_dout;
input   updates_read_data_V_data_V_empty_n;
output   updates_read_data_V_data_V_read;
input  [511:0] updates_read_peek_data_V;
output  [63:0] updates_write_addr_V_din;
input   updates_write_addr_V_full_n;
output   updates_write_addr_V_write;
output  [511:0] updates_write_data_V_data_V_din;
input   updates_write_data_V_data_V_full_n;
output   updates_write_data_V_data_V_write;

reg ap_idle;
reg read_addr_q_fifo_V_read;
reg read_data_q_fifo_V_write;
reg write_addr_q_fifo_V_read;
reg write_data_q_fifo_V_read;
reg updates_read_addr_V_write;
reg updates_read_data_V_data_V_read;
reg updates_write_addr_V_write;
reg updates_write_data_V_data_V_write;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    updates_write_data_V_data_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_3_reg_324;
reg   [0:0] tmp_4_reg_328;
reg   [0:0] full_n_2_reg_332;
reg   [0:0] valid_0_reg_190;
reg   [511:0] update_v_01_reg_202;
wire   [0:0] empty_n_fu_256_p1;
reg   [0:0] empty_n_reg_304;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_predicate_op103_write_state3;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] ap_phi_mux_valid_0_phi_fu_194_p4;
wire   [0:0] tmp_1_nbreadreq_fu_108_p3;
wire   [0:0] full_n_1_nbwrite_fu_122_p3;
wire   [0:0] tmp_3_nbreadreq_fu_135_p3;
wire   [0:0] tmp_4_nbreadreq_fu_143_p3;
wire   [0:0] full_n_2_nbwrite_fu_157_p3;
wire   [511:0] tmp_data_V_fu_278_p1;
reg   [511:0] tmp_data_V_reg_336;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg   [0:0] ap_phi_mux_valid_3_phi_fu_249_p4;
reg   [511:0] ap_phi_mux_update_v_2_phi_fu_237_p4;
reg   [511:0] ap_phi_mux_tmp_val_data_V_phi_fu_216_p4;
reg   [511:0] ap_phi_reg_pp0_iter1_tmp_val_data_V_reg_213;
wire   [511:0] ap_phi_reg_pp0_iter0_tmp_val_data_V_reg_213;
reg   [0:0] ap_phi_mux_valid_1_phi_fu_226_p4;
reg   [0:0] ap_phi_reg_pp0_iter1_valid_1_reg_223;
wire   [0:0] ap_phi_reg_pp0_iter0_valid_1_reg_223;
reg   [511:0] ap_phi_reg_pp0_iter1_update_v_2_reg_233;
wire   [511:0] ap_phi_reg_pp0_iter0_update_v_2_reg_233;
wire   [0:0] and_ln150_fu_297_p2;
reg   [0:0] ap_phi_reg_pp0_iter1_valid_3_reg_245;
wire   [0:0] ap_phi_reg_pp0_iter0_valid_3_reg_245;
wire   [0:0] updates_read_nbread_fu_102_p2_0;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] xor_ln150_fu_291_p0;
wire   [0:0] xor_ln150_fu_291_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_151;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_151)) begin
        if (((empty_n_fu_256_p1 == 1'd1) & (ap_phi_mux_valid_0_phi_fu_194_p4 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_tmp_val_data_V_reg_213 <= updates_read_data_V_data_V_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_tmp_val_data_V_reg_213 <= ap_phi_reg_pp0_iter0_tmp_val_data_V_reg_213;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_151)) begin
        if (((empty_n_fu_256_p1 == 1'd0) & (ap_phi_mux_valid_0_phi_fu_194_p4 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_update_v_2_reg_233 <= updates_read_data_V_data_V_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_update_v_2_reg_233 <= ap_phi_reg_pp0_iter0_update_v_2_reg_233;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_151)) begin
        if (((empty_n_fu_256_p1 == 1'd1) & (ap_phi_mux_valid_0_phi_fu_194_p4 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_valid_1_reg_223 <= updates_read_nbread_fu_102_p2_0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_valid_1_reg_223 <= ap_phi_reg_pp0_iter0_valid_1_reg_223;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_151)) begin
        if (((empty_n_fu_256_p1 == 1'd0) & (ap_phi_mux_valid_0_phi_fu_194_p4 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_valid_3_reg_245 <= updates_read_nbread_fu_102_p2_0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_valid_3_reg_245 <= ap_phi_reg_pp0_iter0_valid_3_reg_245;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        valid_0_reg_190 <= ap_phi_mux_valid_3_phi_fu_249_p4;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        valid_0_reg_190 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_phi_mux_valid_0_phi_fu_194_p4 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_n_reg_304 <= updates_read_nbread_fu_102_p2_0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_4_nbreadreq_fu_143_p3 == 1'd1) & (tmp_3_nbreadreq_fu_135_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        full_n_2_reg_332 <= updates_write_addr_V_full_n;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_3_reg_324 <= tmp_3_nbreadreq_fu_135_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_nbreadreq_fu_135_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_4_reg_328 <= tmp_4_nbreadreq_fu_143_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((full_n_2_nbwrite_fu_157_p3 == 1'd1) & (tmp_4_nbreadreq_fu_143_p3 == 1'd1) & (tmp_3_nbreadreq_fu_135_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_V_reg_336 <= tmp_data_V_fu_278_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        update_v_01_reg_202 <= ap_phi_mux_update_v_2_phi_fu_237_p4;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((valid_0_reg_190 == 1'd1)) begin
        ap_phi_mux_tmp_val_data_V_phi_fu_216_p4 = update_v_01_reg_202;
    end else begin
        ap_phi_mux_tmp_val_data_V_phi_fu_216_p4 = ap_phi_reg_pp0_iter1_tmp_val_data_V_reg_213;
    end
end

always @ (*) begin
    if (((empty_n_reg_304 == 1'd1) | (valid_0_reg_190 == 1'd1))) begin
        ap_phi_mux_update_v_2_phi_fu_237_p4 = ap_phi_mux_tmp_val_data_V_phi_fu_216_p4;
    end else begin
        ap_phi_mux_update_v_2_phi_fu_237_p4 = ap_phi_reg_pp0_iter1_update_v_2_reg_233;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_valid_0_phi_fu_194_p4 = ap_phi_mux_valid_3_phi_fu_249_p4;
    end else begin
        ap_phi_mux_valid_0_phi_fu_194_p4 = valid_0_reg_190;
    end
end

always @ (*) begin
    if ((valid_0_reg_190 == 1'd1)) begin
        ap_phi_mux_valid_1_phi_fu_226_p4 = valid_0_reg_190;
    end else begin
        ap_phi_mux_valid_1_phi_fu_226_p4 = ap_phi_reg_pp0_iter1_valid_1_reg_223;
    end
end

always @ (*) begin
    if (((empty_n_reg_304 == 1'd1) | (valid_0_reg_190 == 1'd1))) begin
        ap_phi_mux_valid_3_phi_fu_249_p4 = and_ln150_fu_297_p2;
    end else begin
        ap_phi_mux_valid_3_phi_fu_249_p4 = ap_phi_reg_pp0_iter1_valid_3_reg_245;
    end
end

always @ (*) begin
    if (((full_n_1_nbwrite_fu_122_p3 == 1'd1) & (tmp_1_nbreadreq_fu_108_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (read_addr_q_fifo_V_empty_n == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        read_addr_q_fifo_V_read = 1'b1;
    end else begin
        read_addr_q_fifo_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (read_data_q_fifo_V_full_n == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & ((empty_n_reg_304 == 1'd1) | (valid_0_reg_190 == 1'd1)))) begin
        read_data_q_fifo_V_write = 1'b1;
    end else begin
        read_data_q_fifo_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_nbreadreq_fu_108_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (updates_read_addr_V_full_n == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        updates_read_addr_V_write = 1'b1;
    end else begin
        updates_read_addr_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (updates_read_data_V_data_V_empty_n == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_phi_mux_valid_0_phi_fu_194_p4 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        updates_read_data_V_data_V_read = 1'b1;
    end else begin
        updates_read_data_V_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_4_nbreadreq_fu_143_p3 == 1'd1) & (tmp_3_nbreadreq_fu_135_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (updates_write_addr_V_full_n == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        updates_write_addr_V_write = 1'b1;
    end else begin
        updates_write_addr_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((full_n_2_reg_332 == 1'd1) & (tmp_4_reg_328 == 1'd1) & (tmp_3_reg_324 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        updates_write_data_V_data_V_blk_n = updates_write_data_V_data_V_full_n;
    end else begin
        updates_write_data_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op103_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        updates_write_data_V_data_V_write = 1'b1;
    end else begin
        updates_write_data_V_data_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((full_n_2_nbwrite_fu_157_p3 == 1'd1) & (tmp_4_nbreadreq_fu_143_p3 == 1'd1) & (tmp_3_nbreadreq_fu_135_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (write_addr_q_fifo_V_empty_n == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        write_addr_q_fifo_V_read = 1'b1;
    end else begin
        write_addr_q_fifo_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((full_n_2_nbwrite_fu_157_p3 == 1'd1) & (tmp_4_nbreadreq_fu_143_p3 == 1'd1) & (tmp_3_nbreadreq_fu_135_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (write_data_q_fifo_V_empty_n == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        write_data_q_fifo_V_read = 1'b1;
    end else begin
        write_data_q_fifo_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln150_fu_297_p2 = (xor_ln150_fu_291_p2 & ap_phi_mux_valid_1_phi_fu_226_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((updates_write_data_V_data_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op103_write_state3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((updates_write_data_V_data_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op103_write_state3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((updates_write_data_V_data_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op103_write_state3 == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((updates_write_data_V_data_V_full_n == 1'b0) & (ap_predicate_op103_write_state3 == 1'b1));
end

always @ (*) begin
    ap_condition_151 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_done = 1'b0;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_tmp_val_data_V_reg_213 = 'bx;

assign ap_phi_reg_pp0_iter0_update_v_2_reg_233 = 'bx;

assign ap_phi_reg_pp0_iter0_valid_1_reg_223 = 'bx;

assign ap_phi_reg_pp0_iter0_valid_3_reg_245 = 'bx;

always @ (*) begin
    ap_predicate_op103_write_state3 = ((full_n_2_reg_332 == 1'd1) & (tmp_4_reg_328 == 1'd1) & (tmp_3_reg_324 == 1'd1));
end

assign ap_ready = 1'b0;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_n_fu_256_p1 = updates_read_nbread_fu_102_p2_0;

assign full_n_1_nbwrite_fu_122_p3 = updates_read_addr_V_full_n;

assign full_n_2_nbwrite_fu_157_p3 = updates_write_addr_V_full_n;

assign read_data_q_fifo_V_din = {{1'd0}, {ap_phi_mux_tmp_val_data_V_phi_fu_216_p4}};

assign tmp_1_nbreadreq_fu_108_p3 = read_addr_q_fifo_V_empty_n;

assign tmp_3_nbreadreq_fu_135_p3 = write_addr_q_fifo_V_empty_n;

assign tmp_4_nbreadreq_fu_143_p3 = write_data_q_fifo_V_empty_n;

assign tmp_data_V_fu_278_p1 = write_data_q_fifo_V_dout[511:0];

assign updates_read_addr_V_din = read_addr_q_peek_val[63:0];

assign updates_read_nbread_fu_102_p2_0 = updates_read_data_V_data_V_empty_n;

assign updates_write_addr_V_din = write_addr_q_peek_val[63:0];

assign updates_write_data_V_data_V_din = tmp_data_V_reg_336;

assign xor_ln150_fu_291_p0 = read_data_q_fifo_V_full_n;

assign xor_ln150_fu_291_p2 = (xor_ln150_fu_291_p0 ^ 1'd1);

endmodule //UpdateMem_UpdateMem
