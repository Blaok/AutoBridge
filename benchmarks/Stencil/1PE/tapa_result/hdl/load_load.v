// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="load_load,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcu250-figd2104-2L-e,HLS_INPUT_CLOCK=3.330000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.370625,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=30,HLS_SYN_DSP=0,HLS_SYN_FF=3200,HLS_SYN_LUT=2164,HLS_VERSION=2019_2}" *)

module load_load (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_source_AWVALID,
        m_axi_source_AWREADY,
        m_axi_source_AWADDR,
        m_axi_source_AWID,
        m_axi_source_AWLEN,
        m_axi_source_AWSIZE,
        m_axi_source_AWBURST,
        m_axi_source_AWLOCK,
        m_axi_source_AWCACHE,
        m_axi_source_AWPROT,
        m_axi_source_AWQOS,
        m_axi_source_AWREGION,
        m_axi_source_AWUSER,
        m_axi_source_WVALID,
        m_axi_source_WREADY,
        m_axi_source_WDATA,
        m_axi_source_WSTRB,
        m_axi_source_WLAST,
        m_axi_source_WID,
        m_axi_source_WUSER,
        m_axi_source_ARVALID,
        m_axi_source_ARREADY,
        m_axi_source_ARADDR,
        m_axi_source_ARID,
        m_axi_source_ARLEN,
        m_axi_source_ARSIZE,
        m_axi_source_ARBURST,
        m_axi_source_ARLOCK,
        m_axi_source_ARCACHE,
        m_axi_source_ARPROT,
        m_axi_source_ARQOS,
        m_axi_source_ARREGION,
        m_axi_source_ARUSER,
        m_axi_source_RVALID,
        m_axi_source_RREADY,
        m_axi_source_RDATA,
        m_axi_source_RLAST,
        m_axi_source_RID,
        m_axi_source_RUSER,
        m_axi_source_RRESP,
        m_axi_source_BVALID,
        m_axi_source_BREADY,
        m_axi_source_BRESP,
        m_axi_source_BID,
        m_axi_source_BUSER,
        sink_0_fifo_V_din,
        sink_0_fifo_V_full_n,
        sink_0_fifo_V_write,
        sink_1_fifo_V_din,
        sink_1_fifo_V_full_n,
        sink_1_fifo_V_write,
        sink_2_fifo_V_din,
        sink_2_fifo_V_full_n,
        sink_2_fifo_V_write,
        sink_3_fifo_V_din,
        sink_3_fifo_V_full_n,
        sink_3_fifo_V_write,
        source_V,
        data_num
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_pp0_stage0 = 9'd128;
parameter    ap_ST_fsm_state11 = 9'd256;
parameter    C_M_AXI_SOURCE_ID_WIDTH = 1;
parameter    C_M_AXI_SOURCE_ADDR_WIDTH = 64;
parameter    C_M_AXI_SOURCE_DATA_WIDTH = 512;
parameter    C_M_AXI_SOURCE_AWUSER_WIDTH = 1;
parameter    C_M_AXI_SOURCE_ARUSER_WIDTH = 1;
parameter    C_M_AXI_SOURCE_WUSER_WIDTH = 1;
parameter    C_M_AXI_SOURCE_RUSER_WIDTH = 1;
parameter    C_M_AXI_SOURCE_BUSER_WIDTH = 1;
parameter    C_M_AXI_SOURCE_USER_VALUE = 0;
parameter    C_M_AXI_SOURCE_PROT_VALUE = 0;
parameter    C_M_AXI_SOURCE_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_M_AXI_SOURCE_WSTRB_WIDTH = (512 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_source_AWVALID;
input   m_axi_source_AWREADY;
output  [C_M_AXI_SOURCE_ADDR_WIDTH - 1:0] m_axi_source_AWADDR;
output  [C_M_AXI_SOURCE_ID_WIDTH - 1:0] m_axi_source_AWID;
output  [7:0] m_axi_source_AWLEN;
output  [2:0] m_axi_source_AWSIZE;
output  [1:0] m_axi_source_AWBURST;
output  [1:0] m_axi_source_AWLOCK;
output  [3:0] m_axi_source_AWCACHE;
output  [2:0] m_axi_source_AWPROT;
output  [3:0] m_axi_source_AWQOS;
output  [3:0] m_axi_source_AWREGION;
output  [C_M_AXI_SOURCE_AWUSER_WIDTH - 1:0] m_axi_source_AWUSER;
output   m_axi_source_WVALID;
input   m_axi_source_WREADY;
output  [C_M_AXI_SOURCE_DATA_WIDTH - 1:0] m_axi_source_WDATA;
output  [C_M_AXI_SOURCE_WSTRB_WIDTH - 1:0] m_axi_source_WSTRB;
output   m_axi_source_WLAST;
output  [C_M_AXI_SOURCE_ID_WIDTH - 1:0] m_axi_source_WID;
output  [C_M_AXI_SOURCE_WUSER_WIDTH - 1:0] m_axi_source_WUSER;
output   m_axi_source_ARVALID;
input   m_axi_source_ARREADY;
output  [C_M_AXI_SOURCE_ADDR_WIDTH - 1:0] m_axi_source_ARADDR;
output  [C_M_AXI_SOURCE_ID_WIDTH - 1:0] m_axi_source_ARID;
output  [7:0] m_axi_source_ARLEN;
output  [2:0] m_axi_source_ARSIZE;
output  [1:0] m_axi_source_ARBURST;
output  [1:0] m_axi_source_ARLOCK;
output  [3:0] m_axi_source_ARCACHE;
output  [2:0] m_axi_source_ARPROT;
output  [3:0] m_axi_source_ARQOS;
output  [3:0] m_axi_source_ARREGION;
output  [C_M_AXI_SOURCE_ARUSER_WIDTH - 1:0] m_axi_source_ARUSER;
input   m_axi_source_RVALID;
output   m_axi_source_RREADY;
input  [C_M_AXI_SOURCE_DATA_WIDTH - 1:0] m_axi_source_RDATA;
input   m_axi_source_RLAST;
input  [C_M_AXI_SOURCE_ID_WIDTH - 1:0] m_axi_source_RID;
input  [C_M_AXI_SOURCE_RUSER_WIDTH - 1:0] m_axi_source_RUSER;
input  [1:0] m_axi_source_RRESP;
input   m_axi_source_BVALID;
output   m_axi_source_BREADY;
input  [1:0] m_axi_source_BRESP;
input  [C_M_AXI_SOURCE_ID_WIDTH - 1:0] m_axi_source_BID;
input  [C_M_AXI_SOURCE_BUSER_WIDTH - 1:0] m_axi_source_BUSER;
output  [512:0] sink_0_fifo_V_din;
input   sink_0_fifo_V_full_n;
output   sink_0_fifo_V_write;
output  [512:0] sink_1_fifo_V_din;
input   sink_1_fifo_V_full_n;
output   sink_1_fifo_V_write;
output  [512:0] sink_2_fifo_V_din;
input   sink_2_fifo_V_full_n;
output   sink_2_fifo_V_write;
output  [512:0] sink_3_fifo_V_din;
input   sink_3_fifo_V_full_n;
output   sink_3_fifo_V_write;
input  [63:0] source_V;
input  [31:0] data_num;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg sink_0_fifo_V_write;
reg sink_1_fifo_V_write;
reg sink_2_fifo_V_write;
reg sink_3_fifo_V_write;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    source_blk_n_AR;
reg    source_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln45_reg_297;
reg    sink_0_fifo_V_blk_n;
reg    sink_1_fifo_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln45_reg_297_pp0_iter1_reg;
reg    sink_2_fifo_V_blk_n;
reg    sink_3_fifo_V_blk_n;
wire    source_AWREADY;
wire    source_WREADY;
reg    source_ARVALID;
wire    source_ARREADY;
wire    source_RVALID;
reg    source_RREADY;
wire   [511:0] source_RDATA;
wire    source_RLAST;
wire   [0:0] source_RID;
wire   [0:0] source_RUSER;
wire   [1:0] source_RRESP;
wire    source_BVALID;
wire   [1:0] source_BRESP;
wire   [0:0] source_BID;
wire   [0:0] source_BUSER;
reg   [30:0] i_0_reg_184;
wire   [0:0] icmp_ln45_fu_220_p2;
wire    ap_block_state8_pp0_stage0_iter0;
reg    ap_block_state9_pp0_stage0_iter1;
reg    ap_block_state10_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [30:0] i_fu_225_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_CS_fsm_state7;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state8;
wire   [63:0] empty_fu_205_p1;
reg    ap_block_pp0_stage0_01001;
wire   [57:0] source_V1_fu_195_p4;
wire   [31:0] zext_ln45_fu_216_p1;
wire   [511:0] grp_fu_240_p2;
wire   [511:0] grp_fu_246_p2;
wire   [511:0] grp_fu_252_p2;
reg    grp_fu_240_ce;
reg    grp_fu_246_ce;
reg    grp_fu_252_ce;
wire    ap_CS_fsm_state11;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

load_load_source_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 512 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_SOURCE_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_SOURCE_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_SOURCE_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_SOURCE_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_SOURCE_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_SOURCE_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_SOURCE_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_SOURCE_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_SOURCE_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_SOURCE_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_SOURCE_CACHE_VALUE ))
load_source_m_axi_U(
    .AWVALID(m_axi_source_AWVALID),
    .AWREADY(m_axi_source_AWREADY),
    .AWADDR(m_axi_source_AWADDR),
    .AWID(m_axi_source_AWID),
    .AWLEN(m_axi_source_AWLEN),
    .AWSIZE(m_axi_source_AWSIZE),
    .AWBURST(m_axi_source_AWBURST),
    .AWLOCK(m_axi_source_AWLOCK),
    .AWCACHE(m_axi_source_AWCACHE),
    .AWPROT(m_axi_source_AWPROT),
    .AWQOS(m_axi_source_AWQOS),
    .AWREGION(m_axi_source_AWREGION),
    .AWUSER(m_axi_source_AWUSER),
    .WVALID(m_axi_source_WVALID),
    .WREADY(m_axi_source_WREADY),
    .WDATA(m_axi_source_WDATA),
    .WSTRB(m_axi_source_WSTRB),
    .WLAST(m_axi_source_WLAST),
    .WID(m_axi_source_WID),
    .WUSER(m_axi_source_WUSER),
    .ARVALID(m_axi_source_ARVALID),
    .ARREADY(m_axi_source_ARREADY),
    .ARADDR(m_axi_source_ARADDR),
    .ARID(m_axi_source_ARID),
    .ARLEN(m_axi_source_ARLEN),
    .ARSIZE(m_axi_source_ARSIZE),
    .ARBURST(m_axi_source_ARBURST),
    .ARLOCK(m_axi_source_ARLOCK),
    .ARCACHE(m_axi_source_ARCACHE),
    .ARPROT(m_axi_source_ARPROT),
    .ARQOS(m_axi_source_ARQOS),
    .ARREGION(m_axi_source_ARREGION),
    .ARUSER(m_axi_source_ARUSER),
    .RVALID(m_axi_source_RVALID),
    .RREADY(m_axi_source_RREADY),
    .RDATA(m_axi_source_RDATA),
    .RLAST(m_axi_source_RLAST),
    .RID(m_axi_source_RID),
    .RUSER(m_axi_source_RUSER),
    .RRESP(m_axi_source_RRESP),
    .BVALID(m_axi_source_BVALID),
    .BREADY(m_axi_source_BREADY),
    .BRESP(m_axi_source_BRESP),
    .BID(m_axi_source_BID),
    .BUSER(m_axi_source_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(source_ARVALID),
    .I_ARREADY(source_ARREADY),
    .I_ARADDR(empty_fu_205_p1),
    .I_ARID(1'd0),
    .I_ARLEN(data_num),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(source_RVALID),
    .I_RREADY(source_RREADY),
    .I_RDATA(source_RDATA),
    .I_RID(source_RID),
    .I_RUSER(source_RUSER),
    .I_RRESP(source_RRESP),
    .I_RLAST(source_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(source_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(source_WREADY),
    .I_WDATA(512'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(64'd0),
    .I_BVALID(source_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(source_BRESP),
    .I_BID(source_BID),
    .I_BUSER(source_BUSER)
);

load_load_add_512ns_512ns_512_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 512 ),
    .din1_WIDTH( 512 ),
    .dout_WIDTH( 512 ))
load_add_512ns_512ns_512_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(source_RDATA),
    .din1(512'd1),
    .ce(grp_fu_240_ce),
    .dout(grp_fu_240_p2)
);

load_load_add_512ns_512ns_512_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 512 ),
    .din1_WIDTH( 512 ),
    .dout_WIDTH( 512 ))
load_add_512ns_512ns_512_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(source_RDATA),
    .din1(512'd2),
    .ce(grp_fu_246_ce),
    .dout(grp_fu_246_p2)
);

load_load_add_512ns_512ns_512_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 512 ),
    .din1_WIDTH( 512 ),
    .dout_WIDTH( 512 ))
load_add_512ns_512ns_512_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(source_RDATA),
    .din1(512'd3),
    .ce(grp_fu_252_ce),
    .dout(grp_fu_252_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state8)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state8);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_220_p2 == 1'd1))) begin
        i_0_reg_184 <= i_fu_225_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_0_reg_184 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln45_reg_297 <= icmp_ln45_fu_220_p2;
        icmp_ln45_reg_297_pp0_iter1_reg <= icmp_ln45_reg_297;
    end
end

always @ (*) begin
    if ((icmp_ln45_fu_220_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_240_ce = 1'b1;
    end else begin
        grp_fu_240_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_246_ce = 1'b1;
    end else begin
        grp_fu_246_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_252_ce = 1'b1;
    end else begin
        grp_fu_252_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_reg_297 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        sink_0_fifo_V_blk_n = sink_0_fifo_V_full_n;
    end else begin
        sink_0_fifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_reg_297 == 1'd1))) begin
        sink_0_fifo_V_write = 1'b1;
    end else begin
        sink_0_fifo_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln45_reg_297_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        sink_1_fifo_V_blk_n = sink_1_fifo_V_full_n;
    end else begin
        sink_1_fifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln45_reg_297_pp0_iter1_reg == 1'd1))) begin
        sink_1_fifo_V_write = 1'b1;
    end else begin
        sink_1_fifo_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln45_reg_297_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        sink_2_fifo_V_blk_n = sink_2_fifo_V_full_n;
    end else begin
        sink_2_fifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln45_reg_297_pp0_iter1_reg == 1'd1))) begin
        sink_2_fifo_V_write = 1'b1;
    end else begin
        sink_2_fifo_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln45_reg_297_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        sink_3_fifo_V_blk_n = sink_3_fifo_V_full_n;
    end else begin
        sink_3_fifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln45_reg_297_pp0_iter1_reg == 1'd1))) begin
        sink_3_fifo_V_write = 1'b1;
    end else begin
        sink_3_fifo_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((source_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        source_ARVALID = 1'b1;
    end else begin
        source_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_reg_297 == 1'd1))) begin
        source_RREADY = 1'b1;
    end else begin
        source_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        source_blk_n_AR = m_axi_source_ARREADY;
    end else begin
        source_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_reg_297 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        source_blk_n_R = m_axi_source_RVALID;
    end else begin
        source_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((source_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln45_fu_220_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln45_fu_220_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((sink_3_fifo_V_full_n == 1'b0) & (icmp_ln45_reg_297_pp0_iter1_reg == 1'd1)) | ((sink_2_fifo_V_full_n == 1'b0) & (icmp_ln45_reg_297_pp0_iter1_reg == 1'd1)) | ((sink_1_fifo_V_full_n == 1'b0) & (icmp_ln45_reg_297_pp0_iter1_reg == 1'd1)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((sink_0_fifo_V_full_n == 1'b0) & (icmp_ln45_reg_297 == 1'd1)) | ((source_RVALID == 1'b0) & (icmp_ln45_reg_297 == 1'd1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((sink_3_fifo_V_full_n == 1'b0) & (icmp_ln45_reg_297_pp0_iter1_reg == 1'd1)) | ((sink_2_fifo_V_full_n == 1'b0) & (icmp_ln45_reg_297_pp0_iter1_reg == 1'd1)) | ((sink_1_fifo_V_full_n == 1'b0) & (icmp_ln45_reg_297_pp0_iter1_reg == 1'd1)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((sink_0_fifo_V_full_n == 1'b0) & (icmp_ln45_reg_297 == 1'd1)) | ((source_RVALID == 1'b0) & (icmp_ln45_reg_297 == 1'd1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((sink_3_fifo_V_full_n == 1'b0) & (icmp_ln45_reg_297_pp0_iter1_reg == 1'd1)) | ((sink_2_fifo_V_full_n == 1'b0) & (icmp_ln45_reg_297_pp0_iter1_reg == 1'd1)) | ((sink_1_fifo_V_full_n == 1'b0) & (icmp_ln45_reg_297_pp0_iter1_reg == 1'd1)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((sink_0_fifo_V_full_n == 1'b0) & (icmp_ln45_reg_297 == 1'd1)) | ((source_RVALID == 1'b0) & (icmp_ln45_reg_297 == 1'd1)))));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter2 = (((sink_3_fifo_V_full_n == 1'b0) & (icmp_ln45_reg_297_pp0_iter1_reg == 1'd1)) | ((sink_2_fifo_V_full_n == 1'b0) & (icmp_ln45_reg_297_pp0_iter1_reg == 1'd1)) | ((sink_1_fifo_V_full_n == 1'b0) & (icmp_ln45_reg_297_pp0_iter1_reg == 1'd1)));
end

assign ap_block_state8_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter1 = (((sink_0_fifo_V_full_n == 1'b0) & (icmp_ln45_reg_297 == 1'd1)) | ((source_RVALID == 1'b0) & (icmp_ln45_reg_297 == 1'd1)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_fu_205_p1 = source_V1_fu_195_p4;

assign i_fu_225_p2 = (i_0_reg_184 + 31'd1);

assign icmp_ln45_fu_220_p2 = (($signed(zext_ln45_fu_216_p1) < $signed(data_num)) ? 1'b1 : 1'b0);

assign sink_0_fifo_V_din = {{1'd0}, {source_RDATA}};

assign sink_1_fifo_V_din = {{1'd0}, {grp_fu_240_p2}};

assign sink_2_fifo_V_din = {{1'd0}, {grp_fu_246_p2}};

assign sink_3_fifo_V_din = {{1'd0}, {grp_fu_252_p2}};

assign source_V1_fu_195_p4 = {{source_V[63:6]}};

assign zext_ln45_fu_216_p1 = i_0_reg_184;

endmodule //load_load
