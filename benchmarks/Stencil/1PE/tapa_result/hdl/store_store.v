// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="store_store,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcu250-figd2104-2L-e,HLS_INPUT_CLOCK=3.330000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.913750,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=30,HLS_SYN_DSP=0,HLS_SYN_FF=5175,HLS_SYN_LUT=2975,HLS_VERSION=2019_2}" *)

module store_store (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_sink_AWVALID,
        m_axi_sink_AWREADY,
        m_axi_sink_AWADDR,
        m_axi_sink_AWID,
        m_axi_sink_AWLEN,
        m_axi_sink_AWSIZE,
        m_axi_sink_AWBURST,
        m_axi_sink_AWLOCK,
        m_axi_sink_AWCACHE,
        m_axi_sink_AWPROT,
        m_axi_sink_AWQOS,
        m_axi_sink_AWREGION,
        m_axi_sink_AWUSER,
        m_axi_sink_WVALID,
        m_axi_sink_WREADY,
        m_axi_sink_WDATA,
        m_axi_sink_WSTRB,
        m_axi_sink_WLAST,
        m_axi_sink_WID,
        m_axi_sink_WUSER,
        m_axi_sink_ARVALID,
        m_axi_sink_ARREADY,
        m_axi_sink_ARADDR,
        m_axi_sink_ARID,
        m_axi_sink_ARLEN,
        m_axi_sink_ARSIZE,
        m_axi_sink_ARBURST,
        m_axi_sink_ARLOCK,
        m_axi_sink_ARCACHE,
        m_axi_sink_ARPROT,
        m_axi_sink_ARQOS,
        m_axi_sink_ARREGION,
        m_axi_sink_ARUSER,
        m_axi_sink_RVALID,
        m_axi_sink_RREADY,
        m_axi_sink_RDATA,
        m_axi_sink_RLAST,
        m_axi_sink_RID,
        m_axi_sink_RUSER,
        m_axi_sink_RRESP,
        m_axi_sink_BVALID,
        m_axi_sink_BREADY,
        m_axi_sink_BRESP,
        m_axi_sink_BID,
        m_axi_sink_BUSER,
        sink_V,
        source_0_fifo_V_dout,
        source_0_fifo_V_empty_n,
        source_0_fifo_V_read,
        source_0_peek_val,
        source_1_fifo_V_dout,
        source_1_fifo_V_empty_n,
        source_1_fifo_V_read,
        source_1_peek_val,
        source_2_fifo_V_dout,
        source_2_fifo_V_empty_n,
        source_2_fifo_V_read,
        source_2_peek_val,
        source_3_fifo_V_dout,
        source_3_fifo_V_empty_n,
        source_3_fifo_V_read,
        source_3_peek_val,
        data_num
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_state7 = 7'd4;
parameter    ap_ST_fsm_state8 = 7'd8;
parameter    ap_ST_fsm_state9 = 7'd16;
parameter    ap_ST_fsm_state10 = 7'd32;
parameter    ap_ST_fsm_state11 = 7'd64;
parameter    C_M_AXI_SINK_ID_WIDTH = 1;
parameter    C_M_AXI_SINK_ADDR_WIDTH = 64;
parameter    C_M_AXI_SINK_DATA_WIDTH = 512;
parameter    C_M_AXI_SINK_AWUSER_WIDTH = 1;
parameter    C_M_AXI_SINK_ARUSER_WIDTH = 1;
parameter    C_M_AXI_SINK_WUSER_WIDTH = 1;
parameter    C_M_AXI_SINK_RUSER_WIDTH = 1;
parameter    C_M_AXI_SINK_BUSER_WIDTH = 1;
parameter    C_M_AXI_SINK_USER_VALUE = 0;
parameter    C_M_AXI_SINK_PROT_VALUE = 0;
parameter    C_M_AXI_SINK_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_M_AXI_SINK_WSTRB_WIDTH = (512 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_sink_AWVALID;
input   m_axi_sink_AWREADY;
output  [C_M_AXI_SINK_ADDR_WIDTH - 1:0] m_axi_sink_AWADDR;
output  [C_M_AXI_SINK_ID_WIDTH - 1:0] m_axi_sink_AWID;
output  [7:0] m_axi_sink_AWLEN;
output  [2:0] m_axi_sink_AWSIZE;
output  [1:0] m_axi_sink_AWBURST;
output  [1:0] m_axi_sink_AWLOCK;
output  [3:0] m_axi_sink_AWCACHE;
output  [2:0] m_axi_sink_AWPROT;
output  [3:0] m_axi_sink_AWQOS;
output  [3:0] m_axi_sink_AWREGION;
output  [C_M_AXI_SINK_AWUSER_WIDTH - 1:0] m_axi_sink_AWUSER;
output   m_axi_sink_WVALID;
input   m_axi_sink_WREADY;
output  [C_M_AXI_SINK_DATA_WIDTH - 1:0] m_axi_sink_WDATA;
output  [C_M_AXI_SINK_WSTRB_WIDTH - 1:0] m_axi_sink_WSTRB;
output   m_axi_sink_WLAST;
output  [C_M_AXI_SINK_ID_WIDTH - 1:0] m_axi_sink_WID;
output  [C_M_AXI_SINK_WUSER_WIDTH - 1:0] m_axi_sink_WUSER;
output   m_axi_sink_ARVALID;
input   m_axi_sink_ARREADY;
output  [C_M_AXI_SINK_ADDR_WIDTH - 1:0] m_axi_sink_ARADDR;
output  [C_M_AXI_SINK_ID_WIDTH - 1:0] m_axi_sink_ARID;
output  [7:0] m_axi_sink_ARLEN;
output  [2:0] m_axi_sink_ARSIZE;
output  [1:0] m_axi_sink_ARBURST;
output  [1:0] m_axi_sink_ARLOCK;
output  [3:0] m_axi_sink_ARCACHE;
output  [2:0] m_axi_sink_ARPROT;
output  [3:0] m_axi_sink_ARQOS;
output  [3:0] m_axi_sink_ARREGION;
output  [C_M_AXI_SINK_ARUSER_WIDTH - 1:0] m_axi_sink_ARUSER;
input   m_axi_sink_RVALID;
output   m_axi_sink_RREADY;
input  [C_M_AXI_SINK_DATA_WIDTH - 1:0] m_axi_sink_RDATA;
input   m_axi_sink_RLAST;
input  [C_M_AXI_SINK_ID_WIDTH - 1:0] m_axi_sink_RID;
input  [C_M_AXI_SINK_RUSER_WIDTH - 1:0] m_axi_sink_RUSER;
input  [1:0] m_axi_sink_RRESP;
input   m_axi_sink_BVALID;
output   m_axi_sink_BREADY;
input  [1:0] m_axi_sink_BRESP;
input  [C_M_AXI_SINK_ID_WIDTH - 1:0] m_axi_sink_BID;
input  [C_M_AXI_SINK_BUSER_WIDTH - 1:0] m_axi_sink_BUSER;
input  [63:0] sink_V;
input  [512:0] source_0_fifo_V_dout;
input   source_0_fifo_V_empty_n;
output   source_0_fifo_V_read;
input  [512:0] source_0_peek_val;
input  [512:0] source_1_fifo_V_dout;
input   source_1_fifo_V_empty_n;
output   source_1_fifo_V_read;
input  [512:0] source_1_peek_val;
input  [512:0] source_2_fifo_V_dout;
input   source_2_fifo_V_empty_n;
output   source_2_fifo_V_read;
input  [512:0] source_2_peek_val;
input  [512:0] source_3_fifo_V_dout;
input   source_3_fifo_V_empty_n;
output   source_3_fifo_V_read;
input  [512:0] source_3_peek_val;
input  [31:0] data_num;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg source_0_fifo_V_read;
reg source_1_fifo_V_read;
reg source_2_fifo_V_read;
reg source_3_fifo_V_read;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    sink_blk_n_AW;
reg    sink_blk_n_W;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln51_reg_275;
reg   [0:0] icmp_ln51_reg_275_pp0_iter3_reg;
reg    sink_blk_n_B;
wire    ap_CS_fsm_state11;
reg    source_0_fifo_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    source_1_fifo_V_blk_n;
reg    source_2_fifo_V_blk_n;
reg    source_3_fifo_V_blk_n;
reg    sink_AWVALID;
wire    sink_AWREADY;
reg    sink_WVALID;
wire    sink_WREADY;
wire    sink_ARREADY;
wire    sink_RVALID;
wire   [511:0] sink_RDATA;
wire    sink_RLAST;
wire   [0:0] sink_RID;
wire   [0:0] sink_RUSER;
wire   [1:0] sink_RRESP;
wire    sink_BVALID;
reg    sink_BREADY;
wire   [1:0] sink_BRESP;
wire   [0:0] sink_BID;
wire   [0:0] sink_BUSER;
reg   [30:0] i_0_reg_186;
wire   [0:0] icmp_ln51_fu_222_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln51_reg_275_pp0_iter1_reg;
reg   [0:0] icmp_ln51_reg_275_pp0_iter2_reg;
wire   [30:0] i_fu_227_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [511:0] trunc_ln83_2_fu_241_p1;
reg   [511:0] trunc_ln83_2_reg_294;
reg   [511:0] trunc_ln83_2_reg_294_pp0_iter2_reg;
wire   [511:0] trunc_ln83_3_fu_245_p1;
reg   [511:0] trunc_ln83_3_reg_299;
reg   [511:0] trunc_ln83_3_reg_299_pp0_iter2_reg;
wire   [511:0] grp_fu_249_p2;
reg   [511:0] add_ln209_reg_304;
wire   [511:0] add_ln209_2_fu_259_p2;
reg   [511:0] add_ln209_2_reg_309;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
wire   [63:0] empty_fu_207_p1;
reg    ap_block_pp0_stage0_01001;
wire   [57:0] sink_V1_fu_197_p4;
wire   [31:0] zext_ln51_fu_218_p1;
wire   [511:0] grp_fu_249_p0;
wire   [511:0] grp_fu_249_p1;
wire   [511:0] add_ln209_1_fu_255_p2;
reg    grp_fu_249_ce;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

store_store_sink_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 512 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_SINK_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_SINK_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_SINK_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_SINK_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_SINK_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_SINK_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_SINK_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_SINK_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_SINK_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_SINK_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_SINK_CACHE_VALUE ))
store_sink_m_axi_U(
    .AWVALID(m_axi_sink_AWVALID),
    .AWREADY(m_axi_sink_AWREADY),
    .AWADDR(m_axi_sink_AWADDR),
    .AWID(m_axi_sink_AWID),
    .AWLEN(m_axi_sink_AWLEN),
    .AWSIZE(m_axi_sink_AWSIZE),
    .AWBURST(m_axi_sink_AWBURST),
    .AWLOCK(m_axi_sink_AWLOCK),
    .AWCACHE(m_axi_sink_AWCACHE),
    .AWPROT(m_axi_sink_AWPROT),
    .AWQOS(m_axi_sink_AWQOS),
    .AWREGION(m_axi_sink_AWREGION),
    .AWUSER(m_axi_sink_AWUSER),
    .WVALID(m_axi_sink_WVALID),
    .WREADY(m_axi_sink_WREADY),
    .WDATA(m_axi_sink_WDATA),
    .WSTRB(m_axi_sink_WSTRB),
    .WLAST(m_axi_sink_WLAST),
    .WID(m_axi_sink_WID),
    .WUSER(m_axi_sink_WUSER),
    .ARVALID(m_axi_sink_ARVALID),
    .ARREADY(m_axi_sink_ARREADY),
    .ARADDR(m_axi_sink_ARADDR),
    .ARID(m_axi_sink_ARID),
    .ARLEN(m_axi_sink_ARLEN),
    .ARSIZE(m_axi_sink_ARSIZE),
    .ARBURST(m_axi_sink_ARBURST),
    .ARLOCK(m_axi_sink_ARLOCK),
    .ARCACHE(m_axi_sink_ARCACHE),
    .ARPROT(m_axi_sink_ARPROT),
    .ARQOS(m_axi_sink_ARQOS),
    .ARREGION(m_axi_sink_ARREGION),
    .ARUSER(m_axi_sink_ARUSER),
    .RVALID(m_axi_sink_RVALID),
    .RREADY(m_axi_sink_RREADY),
    .RDATA(m_axi_sink_RDATA),
    .RLAST(m_axi_sink_RLAST),
    .RID(m_axi_sink_RID),
    .RUSER(m_axi_sink_RUSER),
    .RRESP(m_axi_sink_RRESP),
    .BVALID(m_axi_sink_BVALID),
    .BREADY(m_axi_sink_BREADY),
    .BRESP(m_axi_sink_BRESP),
    .BID(m_axi_sink_BID),
    .BUSER(m_axi_sink_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(sink_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(sink_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(sink_RDATA),
    .I_RID(sink_RID),
    .I_RUSER(sink_RUSER),
    .I_RRESP(sink_RRESP),
    .I_RLAST(sink_RLAST),
    .I_AWVALID(sink_AWVALID),
    .I_AWREADY(sink_AWREADY),
    .I_AWADDR(empty_fu_207_p1),
    .I_AWID(1'd0),
    .I_AWLEN(data_num),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(sink_WVALID),
    .I_WREADY(sink_WREADY),
    .I_WDATA(add_ln209_2_reg_309),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(64'd18446744073709551615),
    .I_BVALID(sink_BVALID),
    .I_BREADY(sink_BREADY),
    .I_BRESP(sink_BRESP),
    .I_BID(sink_BID),
    .I_BUSER(sink_BUSER)
);

store_store_add_512ns_512ns_512_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 512 ),
    .din1_WIDTH( 512 ),
    .dout_WIDTH( 512 ))
store_add_512ns_512ns_512_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_249_p0),
    .din1(grp_fu_249_p1),
    .ce(grp_fu_249_ce),
    .dout(grp_fu_249_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((sink_AWREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~((sink_AWREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln51_fu_222_p2 == 1'd1))) begin
        i_0_reg_186 <= i_fu_227_p2;
    end else if ((~((sink_AWREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_186 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln51_reg_275_pp0_iter2_reg == 1'd1))) begin
        add_ln209_2_reg_309 <= add_ln209_2_fu_259_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln51_reg_275_pp0_iter1_reg == 1'd1))) begin
        add_ln209_reg_304 <= grp_fu_249_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln51_reg_275 <= icmp_ln51_fu_222_p2;
        icmp_ln51_reg_275_pp0_iter1_reg <= icmp_ln51_reg_275;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln51_reg_275_pp0_iter2_reg <= icmp_ln51_reg_275_pp0_iter1_reg;
        icmp_ln51_reg_275_pp0_iter3_reg <= icmp_ln51_reg_275_pp0_iter2_reg;
        trunc_ln83_2_reg_294_pp0_iter2_reg <= trunc_ln83_2_reg_294;
        trunc_ln83_3_reg_299_pp0_iter2_reg <= trunc_ln83_3_reg_299;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln51_reg_275 == 1'd1))) begin
        trunc_ln83_2_reg_294 <= trunc_ln83_2_fu_241_p1;
        trunc_ln83_3_reg_299 <= trunc_ln83_3_fu_245_p1;
    end
end

always @ (*) begin
    if ((icmp_ln51_fu_222_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((sink_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((sink_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_249_ce = 1'b1;
    end else begin
        grp_fu_249_ce = 1'b0;
    end
end

always @ (*) begin
    if ((~((sink_AWREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        sink_AWVALID = 1'b1;
    end else begin
        sink_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((sink_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        sink_BREADY = 1'b1;
    end else begin
        sink_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln51_reg_275_pp0_iter3_reg == 1'd1))) begin
        sink_WVALID = 1'b1;
    end else begin
        sink_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sink_blk_n_AW = m_axi_sink_AWREADY;
    end else begin
        sink_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sink_blk_n_B = m_axi_sink_BVALID;
    end else begin
        sink_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln51_reg_275_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        sink_blk_n_W = m_axi_sink_WREADY;
    end else begin
        sink_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln51_reg_275 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        source_0_fifo_V_blk_n = source_0_fifo_V_empty_n;
    end else begin
        source_0_fifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln51_reg_275 == 1'd1))) begin
        source_0_fifo_V_read = 1'b1;
    end else begin
        source_0_fifo_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln51_reg_275 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        source_1_fifo_V_blk_n = source_1_fifo_V_empty_n;
    end else begin
        source_1_fifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln51_reg_275 == 1'd1))) begin
        source_1_fifo_V_read = 1'b1;
    end else begin
        source_1_fifo_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln51_reg_275 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        source_2_fifo_V_blk_n = source_2_fifo_V_empty_n;
    end else begin
        source_2_fifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln51_reg_275 == 1'd1))) begin
        source_2_fifo_V_read = 1'b1;
    end else begin
        source_2_fifo_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln51_reg_275 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        source_3_fifo_V_blk_n = source_3_fifo_V_empty_n;
    end else begin
        source_3_fifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln51_reg_275 == 1'd1))) begin
        source_3_fifo_V_read = 1'b1;
    end else begin
        source_3_fifo_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((sink_AWREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln51_fu_222_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln51_fu_222_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((sink_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln209_1_fu_255_p2 = (trunc_ln83_3_reg_299_pp0_iter2_reg + trunc_ln83_2_reg_294_pp0_iter2_reg);

assign add_ln209_2_fu_259_p2 = (add_ln209_reg_304 + add_ln209_1_fu_255_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((source_3_fifo_V_empty_n == 1'b0) & (icmp_ln51_reg_275 == 1'd1)) | ((source_2_fifo_V_empty_n == 1'b0) & (icmp_ln51_reg_275 == 1'd1)) | ((source_1_fifo_V_empty_n == 1'b0) & (icmp_ln51_reg_275 == 1'd1)) | ((source_0_fifo_V_empty_n == 1'b0) & (icmp_ln51_reg_275 == 1'd1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((source_3_fifo_V_empty_n == 1'b0) & (icmp_ln51_reg_275 == 1'd1)) | ((source_2_fifo_V_empty_n == 1'b0) & (icmp_ln51_reg_275 == 1'd1)) | ((source_1_fifo_V_empty_n == 1'b0) & (icmp_ln51_reg_275 == 1'd1)) | ((source_0_fifo_V_empty_n == 1'b0) & (icmp_ln51_reg_275 == 1'd1)))) | ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((source_3_fifo_V_empty_n == 1'b0) & (icmp_ln51_reg_275 == 1'd1)) | ((source_2_fifo_V_empty_n == 1'b0) & (icmp_ln51_reg_275 == 1'd1)) | ((source_1_fifo_V_empty_n == 1'b0) & (icmp_ln51_reg_275 == 1'd1)) | ((source_0_fifo_V_empty_n == 1'b0) & (icmp_ln51_reg_275 == 1'd1)))) | ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((source_3_fifo_V_empty_n == 1'b0) & (icmp_ln51_reg_275 == 1'd1)) | ((source_2_fifo_V_empty_n == 1'b0) & (icmp_ln51_reg_275 == 1'd1)) | ((source_1_fifo_V_empty_n == 1'b0) & (icmp_ln51_reg_275 == 1'd1)) | ((source_0_fifo_V_empty_n == 1'b0) & (icmp_ln51_reg_275 == 1'd1)));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((sink_WREADY == 1'b0) & (icmp_ln51_reg_275_pp0_iter3_reg == 1'd1));
end

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_fu_207_p1 = sink_V1_fu_197_p4;

assign grp_fu_249_p0 = source_0_fifo_V_dout[511:0];

assign grp_fu_249_p1 = source_1_fifo_V_dout[511:0];

assign i_fu_227_p2 = (i_0_reg_186 + 31'd1);

assign icmp_ln51_fu_222_p2 = (($signed(zext_ln51_fu_218_p1) < $signed(data_num)) ? 1'b1 : 1'b0);

assign sink_V1_fu_197_p4 = {{sink_V[63:6]}};

assign trunc_ln83_2_fu_241_p1 = source_2_fifo_V_dout[511:0];

assign trunc_ln83_3_fu_245_p1 = source_3_fifo_V_dout[511:0];

assign zext_ln51_fu_218_p1 = i_0_reg_186;

endmodule //store_store
