// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="load_load,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.330000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.370625,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=30,HLS_SYN_DSP=0,HLS_SYN_FF=1458,HLS_SYN_LUT=1742,HLS_VERSION=2019_2}" *)

module load_load (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_from_AWVALID,
        m_axi_from_AWREADY,
        m_axi_from_AWADDR,
        m_axi_from_AWID,
        m_axi_from_AWLEN,
        m_axi_from_AWSIZE,
        m_axi_from_AWBURST,
        m_axi_from_AWLOCK,
        m_axi_from_AWCACHE,
        m_axi_from_AWPROT,
        m_axi_from_AWQOS,
        m_axi_from_AWREGION,
        m_axi_from_AWUSER,
        m_axi_from_WVALID,
        m_axi_from_WREADY,
        m_axi_from_WDATA,
        m_axi_from_WSTRB,
        m_axi_from_WLAST,
        m_axi_from_WID,
        m_axi_from_WUSER,
        m_axi_from_ARVALID,
        m_axi_from_ARREADY,
        m_axi_from_ARADDR,
        m_axi_from_ARID,
        m_axi_from_ARLEN,
        m_axi_from_ARSIZE,
        m_axi_from_ARBURST,
        m_axi_from_ARLOCK,
        m_axi_from_ARCACHE,
        m_axi_from_ARPROT,
        m_axi_from_ARQOS,
        m_axi_from_ARREGION,
        m_axi_from_ARUSER,
        m_axi_from_RVALID,
        m_axi_from_RREADY,
        m_axi_from_RDATA,
        m_axi_from_RLAST,
        m_axi_from_RID,
        m_axi_from_RUSER,
        m_axi_from_RRESP,
        m_axi_from_BVALID,
        m_axi_from_BREADY,
        m_axi_from_BRESP,
        m_axi_from_BID,
        m_axi_from_BUSER,
        to_fifo_V_din,
        to_fifo_V_full_n,
        to_fifo_V_write,
        from_V,
        data_num
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_pp0_stage0 = 9'd128;
parameter    ap_ST_fsm_state10 = 9'd256;
parameter    C_M_AXI_FROM_ID_WIDTH = 1;
parameter    C_M_AXI_FROM_ADDR_WIDTH = 64;
parameter    C_M_AXI_FROM_DATA_WIDTH = 512;
parameter    C_M_AXI_FROM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_FROM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_FROM_WUSER_WIDTH = 1;
parameter    C_M_AXI_FROM_RUSER_WIDTH = 1;
parameter    C_M_AXI_FROM_BUSER_WIDTH = 1;
parameter    C_M_AXI_FROM_USER_VALUE = 0;
parameter    C_M_AXI_FROM_PROT_VALUE = 0;
parameter    C_M_AXI_FROM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_M_AXI_FROM_WSTRB_WIDTH = (512 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_from_AWVALID;
input   m_axi_from_AWREADY;
output  [C_M_AXI_FROM_ADDR_WIDTH - 1:0] m_axi_from_AWADDR;
output  [C_M_AXI_FROM_ID_WIDTH - 1:0] m_axi_from_AWID;
output  [7:0] m_axi_from_AWLEN;
output  [2:0] m_axi_from_AWSIZE;
output  [1:0] m_axi_from_AWBURST;
output  [1:0] m_axi_from_AWLOCK;
output  [3:0] m_axi_from_AWCACHE;
output  [2:0] m_axi_from_AWPROT;
output  [3:0] m_axi_from_AWQOS;
output  [3:0] m_axi_from_AWREGION;
output  [C_M_AXI_FROM_AWUSER_WIDTH - 1:0] m_axi_from_AWUSER;
output   m_axi_from_WVALID;
input   m_axi_from_WREADY;
output  [C_M_AXI_FROM_DATA_WIDTH - 1:0] m_axi_from_WDATA;
output  [C_M_AXI_FROM_WSTRB_WIDTH - 1:0] m_axi_from_WSTRB;
output   m_axi_from_WLAST;
output  [C_M_AXI_FROM_ID_WIDTH - 1:0] m_axi_from_WID;
output  [C_M_AXI_FROM_WUSER_WIDTH - 1:0] m_axi_from_WUSER;
output   m_axi_from_ARVALID;
input   m_axi_from_ARREADY;
output  [C_M_AXI_FROM_ADDR_WIDTH - 1:0] m_axi_from_ARADDR;
output  [C_M_AXI_FROM_ID_WIDTH - 1:0] m_axi_from_ARID;
output  [7:0] m_axi_from_ARLEN;
output  [2:0] m_axi_from_ARSIZE;
output  [1:0] m_axi_from_ARBURST;
output  [1:0] m_axi_from_ARLOCK;
output  [3:0] m_axi_from_ARCACHE;
output  [2:0] m_axi_from_ARPROT;
output  [3:0] m_axi_from_ARQOS;
output  [3:0] m_axi_from_ARREGION;
output  [C_M_AXI_FROM_ARUSER_WIDTH - 1:0] m_axi_from_ARUSER;
input   m_axi_from_RVALID;
output   m_axi_from_RREADY;
input  [C_M_AXI_FROM_DATA_WIDTH - 1:0] m_axi_from_RDATA;
input   m_axi_from_RLAST;
input  [C_M_AXI_FROM_ID_WIDTH - 1:0] m_axi_from_RID;
input  [C_M_AXI_FROM_RUSER_WIDTH - 1:0] m_axi_from_RUSER;
input  [1:0] m_axi_from_RRESP;
input   m_axi_from_BVALID;
output   m_axi_from_BREADY;
input  [1:0] m_axi_from_BRESP;
input  [C_M_AXI_FROM_ID_WIDTH - 1:0] m_axi_from_BID;
input  [C_M_AXI_FROM_BUSER_WIDTH - 1:0] m_axi_from_BUSER;
output  [512:0] to_fifo_V_din;
input   to_fifo_V_full_n;
output   to_fifo_V_write;
input  [63:0] from_V;
input  [31:0] data_num;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg to_fifo_V_write;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    from_blk_n_AR;
reg    from_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln36_reg_183;
reg    to_fifo_V_blk_n;
wire    from_AWREADY;
wire    from_WREADY;
reg    from_ARVALID;
wire    from_ARREADY;
wire    from_RVALID;
reg    from_RREADY;
wire   [511:0] from_RDATA;
wire    from_RLAST;
wire   [0:0] from_RID;
wire   [0:0] from_RUSER;
wire   [1:0] from_RRESP;
wire    from_BVALID;
wire   [1:0] from_BRESP;
wire   [0:0] from_BID;
wire   [0:0] from_BUSER;
reg   [30:0] i_0_reg_115;
wire   [0:0] icmp_ln36_fu_151_p2;
wire    ap_block_state8_pp0_stage0_iter0;
reg    ap_block_state9_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [30:0] i_fu_156_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_CS_fsm_state7;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state8;
wire   [63:0] empty_fu_136_p1;
reg    ap_block_pp0_stage0_01001;
wire   [57:0] from_V1_fu_126_p4;
wire   [31:0] zext_ln36_fu_147_p1;
wire    ap_CS_fsm_state10;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

load_load_from_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 512 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_FROM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_FROM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_FROM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_FROM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_FROM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_FROM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_FROM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_FROM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_FROM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_FROM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_FROM_CACHE_VALUE ))
load_from_m_axi_U(
    .AWVALID(m_axi_from_AWVALID),
    .AWREADY(m_axi_from_AWREADY),
    .AWADDR(m_axi_from_AWADDR),
    .AWID(m_axi_from_AWID),
    .AWLEN(m_axi_from_AWLEN),
    .AWSIZE(m_axi_from_AWSIZE),
    .AWBURST(m_axi_from_AWBURST),
    .AWLOCK(m_axi_from_AWLOCK),
    .AWCACHE(m_axi_from_AWCACHE),
    .AWPROT(m_axi_from_AWPROT),
    .AWQOS(m_axi_from_AWQOS),
    .AWREGION(m_axi_from_AWREGION),
    .AWUSER(m_axi_from_AWUSER),
    .WVALID(m_axi_from_WVALID),
    .WREADY(m_axi_from_WREADY),
    .WDATA(m_axi_from_WDATA),
    .WSTRB(m_axi_from_WSTRB),
    .WLAST(m_axi_from_WLAST),
    .WID(m_axi_from_WID),
    .WUSER(m_axi_from_WUSER),
    .ARVALID(m_axi_from_ARVALID),
    .ARREADY(m_axi_from_ARREADY),
    .ARADDR(m_axi_from_ARADDR),
    .ARID(m_axi_from_ARID),
    .ARLEN(m_axi_from_ARLEN),
    .ARSIZE(m_axi_from_ARSIZE),
    .ARBURST(m_axi_from_ARBURST),
    .ARLOCK(m_axi_from_ARLOCK),
    .ARCACHE(m_axi_from_ARCACHE),
    .ARPROT(m_axi_from_ARPROT),
    .ARQOS(m_axi_from_ARQOS),
    .ARREGION(m_axi_from_ARREGION),
    .ARUSER(m_axi_from_ARUSER),
    .RVALID(m_axi_from_RVALID),
    .RREADY(m_axi_from_RREADY),
    .RDATA(m_axi_from_RDATA),
    .RLAST(m_axi_from_RLAST),
    .RID(m_axi_from_RID),
    .RUSER(m_axi_from_RUSER),
    .RRESP(m_axi_from_RRESP),
    .BVALID(m_axi_from_BVALID),
    .BREADY(m_axi_from_BREADY),
    .BRESP(m_axi_from_BRESP),
    .BID(m_axi_from_BID),
    .BUSER(m_axi_from_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(from_ARVALID),
    .I_ARREADY(from_ARREADY),
    .I_ARADDR(empty_fu_136_p1),
    .I_ARID(1'd0),
    .I_ARLEN(data_num),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(from_RVALID),
    .I_RREADY(from_RREADY),
    .I_RDATA(from_RDATA),
    .I_RID(from_RID),
    .I_RUSER(from_RUSER),
    .I_RRESP(from_RRESP),
    .I_RLAST(from_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(from_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(from_WREADY),
    .I_WDATA(512'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(64'd0),
    .I_BVALID(from_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(from_BRESP),
    .I_BID(from_BID),
    .I_BUSER(from_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state8))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state8))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state8);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln36_fu_151_p2 == 1'd1))) begin
        i_0_reg_115 <= i_fu_156_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_0_reg_115 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln36_reg_183 <= icmp_ln36_fu_151_p2;
    end
end

always @ (*) begin
    if ((icmp_ln36_fu_151_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (from_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        from_ARVALID = 1'b1;
    end else begin
        from_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_reg_183 == 1'd1))) begin
        from_RREADY = 1'b1;
    end else begin
        from_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        from_blk_n_AR = m_axi_from_ARREADY;
    end else begin
        from_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_reg_183 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        from_blk_n_R = m_axi_from_RVALID;
    end else begin
        from_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_reg_183 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        to_fifo_V_blk_n = to_fifo_V_full_n;
    end else begin
        to_fifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_reg_183 == 1'd1))) begin
        to_fifo_V_write = 1'b1;
    end else begin
        to_fifo_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (from_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln36_fu_151_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln36_fu_151_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((to_fifo_V_full_n == 1'b0) & (icmp_ln36_reg_183 == 1'd1)) | ((from_RVALID == 1'b0) & (icmp_ln36_reg_183 == 1'd1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((to_fifo_V_full_n == 1'b0) & (icmp_ln36_reg_183 == 1'd1)) | ((from_RVALID == 1'b0) & (icmp_ln36_reg_183 == 1'd1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((to_fifo_V_full_n == 1'b0) & (icmp_ln36_reg_183 == 1'd1)) | ((from_RVALID == 1'b0) & (icmp_ln36_reg_183 == 1'd1))));
end

assign ap_block_state8_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter1 = (((to_fifo_V_full_n == 1'b0) & (icmp_ln36_reg_183 == 1'd1)) | ((from_RVALID == 1'b0) & (icmp_ln36_reg_183 == 1'd1)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_fu_136_p1 = from_V1_fu_126_p4;

assign from_V1_fu_126_p4 = {{from_V[63:6]}};

assign i_fu_156_p2 = (i_0_reg_115 + 31'd1);

assign icmp_ln36_fu_151_p2 = (($signed(zext_ln36_fu_147_p1) < $signed(data_num)) ? 1'b1 : 1'b0);

assign to_fifo_V_din = {{1'd0}, {from_RDATA}};

assign zext_ln36_fu_147_p1 = i_0_reg_115;

endmodule //load_load
